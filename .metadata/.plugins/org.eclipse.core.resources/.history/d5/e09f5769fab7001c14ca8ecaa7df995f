package com.base;

import java.sql.DriverManager;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.Alert;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.interactions.Actions;

public class BaseClass {
	
	public static WebDriver driver;
	
	public static  WebDriver findBrowser(String type) {
		
						
		if (type.equalsIgnoreCase("chrome")) {
			
			System.setProperty("webdriver.chrome.driver", 
					System.getProperty("user.dir") + "\\Driver\\chromedriver.exe");	
		
			driver =new ChromeDriver();
		}
		else if (type.equalsIgnoreCase("firefox")) {
			
			System.setProperty("webdriver.gecko.driver", 
					System.getProperty("user.dir") + "\\Driver\\chromedriver.exe");	
		
			driver =new FirefoxDriver();
		}		
	return driver;
	}
		
	public static void clickda(WebElement element) {
		
		element.click();
	}
	
	public static void sendKeysda(WebElement element, String keyValue ) {
	
		element.sendKeys(keyValue);
	}
	
	public static void closeMe() {
			
		driver.close();
	}
		
	public static void quitMe() {
		
		driver.quit();
	}
	
	public static void GetUrl(String urlValue) {
		
		driver.get(urlValue);
	}
	
	public static void navigateMethod(String WebSite) {
		
		driver.navigate().to(WebSite);
	}
	
	public static void navigteBack() {
		
		driver.navigate().back();
	}
	
	public static void navigateForward() {

		driver.navigate().forward();
	}
	
	public static void maximiseBrowser() {

		driver.manage().window().maximize();
	}
	
	public static void alertSimple() {
	
		driver.switchTo().alert().accept();
	}
	
	public static void alertAccept( String clickButton , String type) {

		if (type.equalsIgnoreCase("ok")) {
				
			driver.switchTo().alert().accept();
		}
		else if (type.equalsIgnoreCase("cancel")) {
			
			driver.switchTo().alert().dismiss();
		}
		else if (type.equalsIgnoreCase("sendkeys")) {
			
			driver.switchTo().alert().sendKeys(clickButton);
		}
		else if (type.equalsIgnoreCase("gettext")) {
			driver.switchTo().alert().getText();
		}
		
	}
	
	
	public static void implictTimeOut(int time) {

		driver.manage().timeouts().implicitlyWait(time, TimeUnit.SECONDS);
	}
	
	public static void getTextHere(WebElement element) {
		
		System.out.println(element.getText());
	}
	
	public static void currentUrl(WebDriver element) {
		
		driver.getCurrentUrl();
		System.out.println(element.getCurrentUrl());
	}
	
	public static void currentUrl2() {
	
		System.out.println(driver.getCurrentUrl());
	}
	
	public static Boolean SelectedOption(WebElement element) {
		
		System.out.println(element.isSelected());
		return false;
	}
	
	public static Boolean enableOptionda(WebElement element) {
	
		System.out.println(element.isEnabled());
		return null;
	}
	
	public static Boolean displayOption(WebElement element) {
		
		System.out.println(element.isDisplayed());
		return null;
	}
	
	public static void framesOptions(WebElement element, String type1) {
		
		if (type1.equalsIgnoreCase("Frame")) {
			
			driver.switchTo().frame(element);
		}
		
		else if (type1.equalsIgnoreCase("noframe")) {

			driver.switchTo().defaultContent();
		}
	}
	
	public static void WindowUpDown(int x, int y) {

		JavascriptExecutor js= (JavascriptExecutor)driver;
		
		js.executeScript("window.scrollBy(x,y)");
		
	}
	
}

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	


